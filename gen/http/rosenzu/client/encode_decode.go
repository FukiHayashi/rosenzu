// Code generated by goa v3.11.1, DO NOT EDIT.
//
// rosenzu HTTP client encoders and decoders
//
// Command:
// $ goa gen rosenzu/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	rosenzu "rosenzu/gen/rosenzu"
	rosenzuviews "rosenzu/gen/rosenzu/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildFindRequest instantiates a HTTP request object with method and path set
// to call the "rosenzu" service "find" endpoint
func (c *Client) BuildFindRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*rosenzu.FindPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("rosenzu", "find", "*rosenzu.FindPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FindRosenzuPath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("rosenzu", "find", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFindResponse returns a decoder for responses returned by the rosenzu
// find endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeFindResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FindResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("rosenzu", "find", err)
			}
			p := NewFindLineOK(&body)
			view := "default"
			vres := &rosenzuviews.Line{Projected: p, View: view}
			if err = rosenzuviews.ValidateLine(vres); err != nil {
				return nil, goahttp.ErrValidationError("rosenzu", "find", err)
			}
			res := rosenzu.NewLine(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("rosenzu", "find", resp.StatusCode, string(body))
		}
	}
}

// unmarshalElementResponseBodyToRosenzuviewsElementView builds a value of type
// *rosenzuviews.ElementView from a value of type *ElementResponseBody.
func unmarshalElementResponseBodyToRosenzuviewsElementView(v *ElementResponseBody) *rosenzuviews.ElementView {
	if v == nil {
		return nil
	}
	res := &rosenzuviews.ElementView{
		ID: v.ID,
	}
	if v.Coordinates != nil {
		res.Coordinates = make([]*rosenzuviews.CoordinateView, len(v.Coordinates))
		for i, val := range v.Coordinates {
			res.Coordinates[i] = unmarshalCoordinateResponseBodyToRosenzuviewsCoordinateView(val)
		}
	}

	return res
}

// unmarshalCoordinateResponseBodyToRosenzuviewsCoordinateView builds a value
// of type *rosenzuviews.CoordinateView from a value of type
// *CoordinateResponseBody.
func unmarshalCoordinateResponseBodyToRosenzuviewsCoordinateView(v *CoordinateResponseBody) *rosenzuviews.CoordinateView {
	if v == nil {
		return nil
	}
	res := &rosenzuviews.CoordinateView{
		Longitude: v.Longitude,
		Latitude:  v.Latitude,
	}

	return res
}

// unmarshalRelationResponseBodyToRosenzuviewsRelationView builds a value of
// type *rosenzuviews.RelationView from a value of type *RelationResponseBody.
func unmarshalRelationResponseBodyToRosenzuviewsRelationView(v *RelationResponseBody) *rosenzuviews.RelationView {
	if v == nil {
		return nil
	}
	res := &rosenzuviews.RelationView{
		ElementA: v.ElementA,
		ElementB: v.ElementB,
	}

	return res
}

// unmarshalOperationalpointResponseBodyToRosenzuviewsOperationalpointView
// builds a value of type *rosenzuviews.OperationalpointView from a value of
// type *OperationalpointResponseBody.
func unmarshalOperationalpointResponseBodyToRosenzuviewsOperationalpointView(v *OperationalpointResponseBody) *rosenzuviews.OperationalpointView {
	if v == nil {
		return nil
	}
	res := &rosenzuviews.OperationalpointView{
		Name:      v.Name,
		ElementID: v.ElementID,
	}

	return res
}
