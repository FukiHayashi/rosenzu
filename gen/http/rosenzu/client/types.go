// Code generated by goa v3.11.1, DO NOT EDIT.
//
// rosenzu HTTP client types
//
// Command:
// $ goa gen rosenzu/design

package client

import (
	rosenzuviews "rosenzu/gen/rosenzu/views"
)

// FindResponseBody is the type of the "rosenzu" service "find" endpoint HTTP
// response body.
type FindResponseBody struct {
	// 路線名
	Name              *string                                `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Elements          ElementCollectionResponseBody          `form:"elements,omitempty" json:"elements,omitempty" xml:"elements,omitempty"`
	Relations         RelationCollectionResponseBody         `form:"relations,omitempty" json:"relations,omitempty" xml:"relations,omitempty"`
	OperationalPoints OperationalpointCollectionResponseBody `form:"operationalPoints,omitempty" json:"operationalPoints,omitempty" xml:"operationalPoints,omitempty"`
}

// ElementCollectionResponseBody is used to define fields on response body
// types.
type ElementCollectionResponseBody []*ElementResponseBody

// ElementResponseBody is used to define fields on response body types.
type ElementResponseBody struct {
	// id
	ID          *int                             `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Coordinates CoordinateCollectionResponseBody `form:"coordinates,omitempty" json:"coordinates,omitempty" xml:"coordinates,omitempty"`
}

// CoordinateCollectionResponseBody is used to define fields on response body
// types.
type CoordinateCollectionResponseBody []*CoordinateResponseBody

// CoordinateResponseBody is used to define fields on response body types.
type CoordinateResponseBody struct {
	// 緯度
	Longitude *float32 `form:"longitude,omitempty" json:"longitude,omitempty" xml:"longitude,omitempty"`
	// 経度
	Latitude *float32 `form:"latitude,omitempty" json:"latitude,omitempty" xml:"latitude,omitempty"`
}

// RelationCollectionResponseBody is used to define fields on response body
// types.
type RelationCollectionResponseBody []*RelationResponseBody

// RelationResponseBody is used to define fields on response body types.
type RelationResponseBody struct {
	// elementA
	ElementA *int `form:"elementA,omitempty" json:"elementA,omitempty" xml:"elementA,omitempty"`
	// elementB
	ElementB *int `form:"elementB,omitempty" json:"elementB,omitempty" xml:"elementB,omitempty"`
}

// OperationalpointCollectionResponseBody is used to define fields on response
// body types.
type OperationalpointCollectionResponseBody []*OperationalpointResponseBody

// OperationalpointResponseBody is used to define fields on response body types.
type OperationalpointResponseBody struct {
	// バス停名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// elementID
	ElementID *int `form:"elementID,omitempty" json:"elementID,omitempty" xml:"elementID,omitempty"`
}

// NewFindLineOK builds a "rosenzu" service "find" endpoint result from a HTTP
// "OK" response.
func NewFindLineOK(body *FindResponseBody) *rosenzuviews.LineView {
	v := &rosenzuviews.LineView{
		Name: body.Name,
	}
	if body.Elements != nil {
		v.Elements = make([]*rosenzuviews.ElementView, len(body.Elements))
		for i, val := range body.Elements {
			v.Elements[i] = unmarshalElementResponseBodyToRosenzuviewsElementView(val)
		}
	}
	if body.Relations != nil {
		v.Relations = make([]*rosenzuviews.RelationView, len(body.Relations))
		for i, val := range body.Relations {
			v.Relations[i] = unmarshalRelationResponseBodyToRosenzuviewsRelationView(val)
		}
	}
	if body.OperationalPoints != nil {
		v.OperationalPoints = make([]*rosenzuviews.OperationalpointView, len(body.OperationalPoints))
		for i, val := range body.OperationalPoints {
			v.OperationalPoints[i] = unmarshalOperationalpointResponseBodyToRosenzuviewsOperationalpointView(val)
		}
	}

	return v
}
