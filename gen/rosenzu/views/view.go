// Code generated by goa v3.11.1, DO NOT EDIT.
//
// rosenzu views
//
// Command:
// $ goa gen rosenzu/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Line is the viewed result type that is projected based on a view.
type Line struct {
	// Type to project
	Projected *LineView
	// View to render
	View string
}

// LineView is a type that runs validations on a projected type.
type LineView struct {
	// 路線名
	Name              *string
	Elements          ElementCollectionView
	Relations         RelationCollectionView
	OperationalPoints OperationalpointCollectionView
}

// ElementCollectionView is a type that runs validations on a projected type.
type ElementCollectionView []*ElementView

// ElementView is a type that runs validations on a projected type.
type ElementView struct {
	// id
	ID          *int
	Coordinates CoordinateCollectionView
}

// CoordinateCollectionView is a type that runs validations on a projected type.
type CoordinateCollectionView []*CoordinateView

// CoordinateView is a type that runs validations on a projected type.
type CoordinateView struct {
	// 緯度
	Longitude *float32
	// 経度
	Latitude *float32
}

// RelationCollectionView is a type that runs validations on a projected type.
type RelationCollectionView []*RelationView

// RelationView is a type that runs validations on a projected type.
type RelationView struct {
	// elementA
	ElementA *int
	// elementB
	ElementB *int
}

// OperationalpointCollectionView is a type that runs validations on a
// projected type.
type OperationalpointCollectionView []*OperationalpointView

// OperationalpointView is a type that runs validations on a projected type.
type OperationalpointView struct {
	// バス停名
	Name *string
	// elementID
	ElementID *int
}

var (
	// LineMap is a map indexing the attribute names of Line by view name.
	LineMap = map[string][]string{
		"default": {
			"name",
			"elements",
			"relations",
			"operationalPoints",
		},
	}
	// ElementCollectionMap is a map indexing the attribute names of
	// ElementCollection by view name.
	ElementCollectionMap = map[string][]string{
		"default": {
			"coordinates",
		},
	}
	// ElementMap is a map indexing the attribute names of Element by view name.
	ElementMap = map[string][]string{
		"default": {
			"coordinates",
		},
	}
	// CoordinateCollectionMap is a map indexing the attribute names of
	// CoordinateCollection by view name.
	CoordinateCollectionMap = map[string][]string{
		"dafault": {
			"longitude",
			"latitude",
		},
		"default": {
			"longitude",
			"latitude",
		},
	}
	// CoordinateMap is a map indexing the attribute names of Coordinate by view
	// name.
	CoordinateMap = map[string][]string{
		"dafault": {
			"longitude",
			"latitude",
		},
		"default": {
			"longitude",
			"latitude",
		},
	}
	// RelationCollectionMap is a map indexing the attribute names of
	// RelationCollection by view name.
	RelationCollectionMap = map[string][]string{
		"dafault": {
			"elementA",
			"elementB",
		},
		"default": {
			"elementA",
			"elementB",
		},
	}
	// RelationMap is a map indexing the attribute names of Relation by view name.
	RelationMap = map[string][]string{
		"dafault": {
			"elementA",
			"elementB",
		},
		"default": {
			"elementA",
			"elementB",
		},
	}
	// OperationalpointCollectionMap is a map indexing the attribute names of
	// OperationalpointCollection by view name.
	OperationalpointCollectionMap = map[string][]string{
		"default": {
			"name",
			"elementID",
		},
	}
	// OperationalpointMap is a map indexing the attribute names of
	// Operationalpoint by view name.
	OperationalpointMap = map[string][]string{
		"default": {
			"name",
			"elementID",
		},
	}
)

// ValidateLine runs the validations defined on the viewed result type Line.
func ValidateLine(result *Line) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateLineView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateLineView runs the validations defined on LineView using the
// "default" view.
func ValidateLineView(result *LineView) (err error) {

	if result.Elements != nil {
		if err2 := ValidateElementCollectionView(result.Elements); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Relations != nil {
		if err2 := ValidateRelationCollectionView(result.Relations); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.OperationalPoints != nil {
		if err2 := ValidateOperationalpointCollectionView(result.OperationalPoints); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateElementCollectionView runs the validations defined on
// ElementCollectionView using the "default" view.
func ValidateElementCollectionView(result ElementCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateElementView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateElementView runs the validations defined on ElementView using the
// "default" view.
func ValidateElementView(result *ElementView) (err error) {

	if result.Coordinates != nil {
		if err2 := ValidateCoordinateCollectionView(result.Coordinates); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCoordinateCollectionViewDafault runs the validations defined on
// CoordinateCollectionView using the "dafault" view.
func ValidateCoordinateCollectionViewDafault(result CoordinateCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCoordinateViewDafault(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCoordinateCollectionView runs the validations defined on
// CoordinateCollectionView using the "default" view.
func ValidateCoordinateCollectionView(result CoordinateCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCoordinateView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCoordinateViewDafault runs the validations defined on CoordinateView
// using the "dafault" view.
func ValidateCoordinateViewDafault(result *CoordinateView) (err error) {

	return
}

// ValidateCoordinateView runs the validations defined on CoordinateView using
// the "default" view.
func ValidateCoordinateView(result *CoordinateView) (err error) {

	return
}

// ValidateRelationCollectionViewDafault runs the validations defined on
// RelationCollectionView using the "dafault" view.
func ValidateRelationCollectionViewDafault(result RelationCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateRelationViewDafault(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRelationCollectionView runs the validations defined on
// RelationCollectionView using the "default" view.
func ValidateRelationCollectionView(result RelationCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateRelationView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRelationViewDafault runs the validations defined on RelationView
// using the "dafault" view.
func ValidateRelationViewDafault(result *RelationView) (err error) {

	return
}

// ValidateRelationView runs the validations defined on RelationView using the
// "default" view.
func ValidateRelationView(result *RelationView) (err error) {

	return
}

// ValidateOperationalpointCollectionView runs the validations defined on
// OperationalpointCollectionView using the "default" view.
func ValidateOperationalpointCollectionView(result OperationalpointCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateOperationalpointView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateOperationalpointView runs the validations defined on
// OperationalpointView using the "default" view.
func ValidateOperationalpointView(result *OperationalpointView) (err error) {

	return
}
